# نام Workflow که در تب Actions گیت‌هاب نمایش داده می‌شود
name: Fetch VPN Configs

on:
  # اجرای خودکار هر ۶ ساعت یک بار
  # '0 */6 * * *' یعنی در دقیقه صفرم، هر شش ساعت یک‌بار
  schedule:
    - cron: '0 */6 * * *'

  # این خط به شما اجازه می‌دهد که Workflow را به صورت دستی هم از طریق تب Actions اجرا کنید
  workflow_dispatch:

jobs:
  fetch-and-commit:
    # این job روی یک ماشین مجازی اوبونتو آخرین نسخه اجرا می‌شود
    runs-on: ubuntu-latest

    # دسترسی write برای GITHUB_TOKEN برای امکان push کردن
    permissions:
      contents: write

    steps:
      # مرحله ۱: چک‌اوت کردن کد ریپوزیتوری
      # این کار باعث می‌شود فایل‌های شما (مثل اسکریپت پایتون) در دسترس ماشین مجازی قرار گیرد
      # actions/checkout@v4 به طور پیشفرض از GITHUB_TOKEN استفاده می کند اگر permissions داده شده باشد
      - name: Checkout repository
        uses: actions/checkout@v4
        # با permissions: contents: write دیگر نیازی به پاس کردن token به این شکل نیست
        # with:
        #   token: ${{ secrets.GITHUB_TOKEN }}


      # مرحله ۲: نصب پایتون و کش کردن pip
      # نسخه‌ی پایتون را مشخص می‌کنیم و pip cache را فعال می کنیم
      - name: Set up Python with caching
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          # فعال کردن کش pip به سادگی با یک خط
          cache: pip

      # مرحله ۳: نصب کتابخانه‌های مورد نیاز پایتون
      # در این مورد فقط کتابخانه requests نیاز است
      # با وجود کش فعال شده در مرحله قبل، این مرحله سریعتر خواهد بود
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # مرحله ۴: اجرای اسکریپت پایتون
      # اسکریپت شما اجرا شده و فایل configs.txt را ایجاد یا به‌روزرسانی می‌کند
      - name: Run the script to fetch configs
        run: python get_configs.py

      # مرحله ۵: کامیت کردن و پوش کردن تغییرات در ریپوزیتوری (اصلاح شده)
      - name: Commit and push if changes are detected
        run: |
          # تنظیم اطلاعات کاربری Git برای کامیت
          git config --local user.name "GitHub Actions Bot" # استفاده از نام ربات گیت هاب برای وضوح بیشتر
          git config --local user.email "actions@github.com" # استفاده از ایمیل پیشفرض ربات گیت هاب

          # اضافه کردن فایل تغییر یافته
          git add configs.txt

          # بررسی وجود تغییرات برای کامیت
          # git diff --cached --quiet اگر هیچ تفاوتی نباشد با کد 0 و اگر تغییر باشد با کد 111 خارج می شود
          # ما می خواهیم اگر تغییر نبود پیام داده و ادامه ندهیم
          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping commit and push."
            exit 0 # خروج موفقیت آمیز از مرحله
          else
            echo "Changes detected. Committing and pushing."
            # کامیت کردن تغییرات
            git commit -m "chore: Auto-update configs"

            # *** حل مشکل non-fast-forward با pull --rebase قبل از push ***
            # این دستور آخرین تغییرات را گرفته و کامیت محلی را روی سرشاخه جدید اعمال می کند.
            # || true در انتها باعث می شود حتی اگر pull --rebase خطایی داد (مثلا کانفلیکت پیچیده که در اینجا بعید است)، workflow متوقف نشود.
            git pull --rebase origin main || true

            # پوش کردن تغییرات به شاخه main
            git push origin main
          fi
